type anon_class_15_1 = 
service {
    greet: (text) -> (text) query;
    get_number_of_users: () -> (nat) query;
    add_contract: (text) -> ();
};

type Contract = record {
    id: nat;
    timestamp: nat;
    creator: principal;
    voters: vec PrincipalName;
};

type PrincipalName = text;
type Tokens = nat;

type TransferArgs {
    to: principal;
    amount: Tokens;
};

type ContractState = variant {
    Open;
    Closed;
    Succeeded;
    Failed: text;
}

type MusallStableStorage = record {
    accounts: vec Account;
    contracts: vec Contract;
    system_params: SystemParams;
};

service : () -> anon_class_15_1